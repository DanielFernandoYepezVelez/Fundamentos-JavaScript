QUE SON LOS MODULOS =>
Un módulo en programación nos va a permitir agrupar funcionalidad relacionada en un mismo archivo de esta forma, conforme nuestro proyecto crezca, seá más fácil de mantener y estará mejor organizado.

La ventaja principal de un módulo es que podremos utilizarlo únicamente donde sea requerido, dejando el resto del programa oculto para el resto del código y también re-utilizar código.
-----------------------------------------
BENEFICIOS =>
Dividir el código en pequeños archivos con funcionalidad relacionada.

Un módulo puede ser utilizado facilmente en otra aplicación.

Dependencias.

Evitan el conflicto con el nombre de la variables.
-----------------------------------------

QUE SON LAS DEPENDENCIAS =>
Es cuando un módulo puede y debe estar conectado con otro módulo, esa relación se conoce como dependencia.

Si un módulo requiere una pieza de otro módulo se dice que "depende de ese módulo".
-----------------------------------------

LOS MODULOES EVITAN EL CONFLICTO CON EL NOMBRE DE LAS VARIABLES =>
La idea de crear módulos es por que también nos ayudan a evitar que si tenemos 2 módulos con la función cliente estos no tengan un conflicto.

Esto es debido a que las funciones serán llamadas como:
modulo1.cliente();
modulo2.cliente();
-----------------------------------------

DESVENTAJAS DE UTILIZAR MUCHOS ARCHIVOS JS, ENLAZADOS EN EL HTML =>
Cada script es un llamado HTTP, lo cual hace el sitio web más lento.

Cada script detiene la ejecución mientras se descarga.

El manejo de las dependencias es manual: Si tienes una función en el archivo B y se utiliza en el archivo A sin haberse cargado, tendras un problema.
-----------------------------------------

OTRAS FORMAS DE UTILIZAR MÓDULOS EN JS =>
Crear un gran archivo con todo el código(No se recomienda).

RequireJS y SystemJS fueron de las primera librerías que lograron hacer algo cercano a los módulos en JavaScript, cargaban los distintos archivos con llamados AJAX, pero esto a la larga termina siendo complicado para un proyecto grande.

Bundlers, Preprocesadores y Tanspiladores: Browserify, webpack y otros como gulp y grunt.
-----------------------------------------

MÓDULOS ES6 =>
Si bien webpack es la mejor opción para crear módulos y Bundlers, veremos como hacerlos con ES6 de forma nativa antes de probar webpack.
-----------------------------------------