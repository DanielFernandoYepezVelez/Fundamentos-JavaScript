  🔒MÉTODOS Y PROPIEDADES DE LOS ARRAYS(Conocidos):
🔒.lenght; = Renderiza el número de elementos de un
array, es decir, su longitud, inicia desde (#1).

🔒.push('valorFinal'); = Estoy agregando un nuevo 
elemento o "DATO" al final de un array.

🔒.unshift('valorInicial'); = Estoy agregando un 
nuevo elemento o "DATO" al inicio de un array.

🔒.pop(); = Estoy eliminando el ultimo elemento o
"DATO" de un array.

🔒.shift(); = Estoy eliminando un elemento o "DATO"
al inicio de un array.

🔒.splice(2, 1); = Estoy eliminando en un rango
de un arreglo, el elemento dos del arreglo se elimina y solo se elimina ese elemento , tener presente que el rango puede ser mayor a uno, es decir, un solo elemento.

🔒.splice(2, 1, textoAeditar); = Estoy editando(ACTUALIZAR) en un rango
de un arreglo, el elemento dos del arreglo se elimina y solo se elimina ese elemento , tener presente que el rango puede ser mayor a uno, es decir, un solo elemento.(UBICA LOS ELEMENTOS EN DIFERENTES PARTES DEL ARRAY).

🔒.slice(a, b) => Recibe indices como parametros para extraer contenido de un array o tambien puede extraer una copia completa e igual del array indicado.

🔒.isArray(); = Me ayuda a comprobar si un array es un array de JAVASCRIPT identificando su tipo de dato.Y en este caso me devuelve un tipo de dato Boolean(true o false).

🔒.reverse() = Todos los valores de los indices de un array se ponga de revés, los ultimos seran los 
primeros.

🔒.join(); = Permite configurar un arreglo para aplicar
un espaciado entre cada uno de los elementos y lo
renderiza como texto plano.

🔒.concat(); = Estoy concatenando los elementos de un arreglo, con los elementos de otro. También me sirve para concatenar al interior del arreglo diferentes tipos de variables.

🔒.split('') = Convierte  en un array el elemento iterable. Un elemento iterable es aquel que se puede recorrer, como por ejemplo un string.

        📌CALLBACKS RECORREN UNO A UNO LOS ELEMENTOS DE LOS ARRAYS UNIDIMENSIONALES
📌Array.from(ElementoIterableAqui); = Permite convertir un NodeList o un array que devuelve el DOM, para convertirlo en un array tipo JAVASCRIPT y asi aplicar todos los metodos y propiedades vistas en los arrays, en conclusión, Convierte en un array el elemento iterable. Un elemento iterable es aquel que se puede recorrer, por eso se menciona el NodeList.

📌.sort([callBack(opcional)]); = Ordena los elementos de un array alfabéticamente gracias al valor Unicode que tienen las letras, si le pasamos un callback los ordena en función del algoritmo que le pasemos. 
(Permite mostrar los elementos de un arreglo ordenados alfabéticamente y También me sirve para ordenar los numeros con una función como parametro).

📌.forEach(callback(valorActual, [index(opcional)])); = Ejecuta la función indicada una vez por cada elemento del array.

📌.find(callBack); = Devuelve el valor del primer elemento del array que cumple la condición de la función callBack.

📌.findIndex(callback); = El método findIndex() devuelve el índice del primer elemento de un array que cumpla con la función de prueba proporcionada. En caso contrario devuelve -1.

📌.some(callBack); = Comprueba si al menos un elemento del array cumple la condición, recorre uno a uno. Devuelve un tipo de dato lógico(Boolena).

📌.every(callback); = Comprueba si todos los elementos del array cumplen la condicion, recorre uno a uno. Devuelve un tipo de dato lógico(Boolena).

📌.map(callback); = Transforma(hacer operaciones, encontrar longitud, etc.) todos los elementos del array y devuelve un nuevo array.

📌.filter(callBack); = filtra todos los elementos del array que cumplen la condición y devuelve un nuevo array.

📌.reduce(callback); = reduce todos los elementos del array a un unico valor.