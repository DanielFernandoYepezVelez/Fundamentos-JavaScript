API'S => Application Programming Interface.

Son funciones o métodos que ofrece una librería para ser utilizados por otro software como capa de abstracción(No programamos directamente en la libreria, sino en nuestro proyecto) y para acceder a los servicios que ofrece dicha libreria hay que enviar una petición estructurada(REST).

EJEMPLO GOOGLE MAPS API =>
Creamos nuestro propio proyecto y en el, podemos agregar un mapa, por lo tanto GOOGLE MAPS API es una libreria que esta siendo utilizada por otro software, que en este caso es nuestro proyecto.

No programamos en la API de GOOGLE MAPS, ellos nos ofrecen una serie de funciones o metodos para trabajar con su libreria. POR EJEMPLO => La latitud, La longitud, El tipo de mapa, El Zoom, Donde Se va a mostrar el PIN.

Y esto usualmente es la capa de abstracción, no programamos directamente en GOOGLE MAPS, programamos sobre nuestros archivos de JavaScript, pero enviamos una petición(Request) estructurada a la API de GOOGLE MAPS.

Las API's deben responder a los request o peticiones de HTTP: GET, POST, PUT, PATCH, DELETE.

Cada API tiene sus propias reglas, métodos o funciones, estructuras.
------------------------------------------------------

REST => Representational State Transfer.

REST describe como deben ponerse a disposición los recursos o datos, es decir, entregarlos o proporcionarlos(Lo que hace es definir como deben ser las Urls o EndPoints de un request o petición).

Una REST-API´s puede ser diseñada en cualquier lenguaje de backend y tambien una REST-API´s, puede ser accedida por cualquier lenguaje de backend, cuando hablo de acceder, me refiero a obtener los datos de dicha REST-API´s. Muchas REST-API´s no se conoce en que lenguaje fueron creadas, pero nos entregan los datos requeridos por nuestro propio lenguaje de backend.
------------------------------------------------------

REST-API EndPoints y Request(Peticiones) =>
Una REST-API cuenta con EndPoints(o Urls) para hacer operaciones CRUD.

EJEMPLO DE UNA REST-API Y COMO DEBEN SER SUS REQUEST =>
Listar todos los clientes GET /clientes
Obtener un solo cliente GET /clientes/10
Crear un nuevo cliente POST /clientes
Editar un contacto PUT /clientes/3
Borrar un contacto DELETE /clientes/8
------------------------------------------------------